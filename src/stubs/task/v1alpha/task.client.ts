// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "task/v1alpha/task.proto" (package "task.v1alpha", syntax proto3)
// tslint:disable
import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import type { ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { TaskService } from './task';
import type { DeleteTaskRequest } from './task';
import type { UpdateTaskRequest } from './task';
import type { CreateTaskRequest } from './task';
import type { Task } from './task';
import type { GetTaskRequest } from './task';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { ListTasksResponse } from './task';
import type { ListTasksRequest } from './task';
import type { UnaryCall } from '@protobuf-ts/runtime-rpc';
import type { RpcOptions } from '@protobuf-ts/runtime-rpc';
/**
 * @generated from protobuf service task.v1alpha.TaskService
 */
export interface ITaskServiceClient {
  /**
   * @generated from protobuf rpc: ListTasks(task.v1alpha.ListTasksRequest) returns (task.v1alpha.ListTasksResponse);
   */
  listTasks(
    input: ListTasksRequest,
    options?: RpcOptions,
  ): UnaryCall<ListTasksRequest, ListTasksResponse>;
  /**
   * @generated from protobuf rpc: GetTask(task.v1alpha.GetTaskRequest) returns (task.v1alpha.Task);
   */
  getTask(
    input: GetTaskRequest,
    options?: RpcOptions,
  ): UnaryCall<GetTaskRequest, Task>;
  /**
   * @generated from protobuf rpc: CreateTask(task.v1alpha.CreateTaskRequest) returns (task.v1alpha.Task);
   */
  createTask(
    input: CreateTaskRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateTaskRequest, Task>;
  /**
   * @generated from protobuf rpc: UpdateTask(task.v1alpha.UpdateTaskRequest) returns (task.v1alpha.Task);
   */
  updateTask(
    input: UpdateTaskRequest,
    options?: RpcOptions,
  ): UnaryCall<UpdateTaskRequest, Task>;
  /**
   * @generated from protobuf rpc: DeleteTask(task.v1alpha.DeleteTaskRequest) returns (task.v1alpha.Task);
   */
  deleteTask(
    input: DeleteTaskRequest,
    options?: RpcOptions,
  ): UnaryCall<DeleteTaskRequest, Task>;
}
/**
 * @generated from protobuf service task.v1alpha.TaskService
 */
export class TaskServiceClient implements ITaskServiceClient, ServiceInfo {
  typeName = TaskService.typeName;
  methods = TaskService.methods;
  options = TaskService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: ListTasks(task.v1alpha.ListTasksRequest) returns (task.v1alpha.ListTasksResponse);
   */
  listTasks(
    input: ListTasksRequest,
    options?: RpcOptions,
  ): UnaryCall<ListTasksRequest, ListTasksResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ListTasksRequest, ListTasksResponse>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: GetTask(task.v1alpha.GetTaskRequest) returns (task.v1alpha.Task);
   */
  getTask(
    input: GetTaskRequest,
    options?: RpcOptions,
  ): UnaryCall<GetTaskRequest, Task> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<GetTaskRequest, Task>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: CreateTask(task.v1alpha.CreateTaskRequest) returns (task.v1alpha.Task);
   */
  createTask(
    input: CreateTaskRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateTaskRequest, Task> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CreateTaskRequest, Task>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: UpdateTask(task.v1alpha.UpdateTaskRequest) returns (task.v1alpha.Task);
   */
  updateTask(
    input: UpdateTaskRequest,
    options?: RpcOptions,
  ): UnaryCall<UpdateTaskRequest, Task> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<UpdateTaskRequest, Task>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: DeleteTask(task.v1alpha.DeleteTaskRequest) returns (task.v1alpha.Task);
   */
  deleteTask(
    input: DeleteTaskRequest,
    options?: RpcOptions,
  ): UnaryCall<DeleteTaskRequest, Task> {
    const method = this.methods[4],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<DeleteTaskRequest, Task>(
      'unary',
      this._transport,
      method,
      opt,
      input,
    );
  }
}